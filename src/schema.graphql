# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int
  first_name: String
  last_name: String
  username: String
  email: String
  password: String
  roleId: Int!
  status: String
  userType: String
  role: Role
}

type Role {
  id: Int!
  name: String!
  description: String
  status: EntityStatus!
  createdAt: DateTime
}

enum EntityStatus {
  ACTIVE
  IN_ACTIVE
  DELETE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginResponse {
  user: User!
  token: String!
}

type Chat {
  id: Int!
  head: String!
  content: String!
}

type Category {
  id: Int!
  name: String!
  createdBy: Int!
  updatedBy: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

type Product {
  id: Int!
  name: String!
  description: String
  createdBy: Int
  updatedBy: Int
  createdAt: DateTime
  updatedAt: DateTime
  status: EntityStatus!
}

type ResultTelegram {
  recipientAccount: String!
}

type TelegramUser {
  firstName: String
  lastName: String
  phone: String
  username: String
  bot: Boolean
  scam: Boolean
  fake: Boolean
  premium: Boolean
}

type Query {
  getUsers: [User!]!
  getUserById: User!
  getProducts: [Product!]!
  getProductBuyId(id: String!): Product!
  getCategories: [Category!]!
  getCategory(id: Float!): [Category!]!
  getRoles: [Role!]!
  getRole(id: RoleFilter!): Role!
  searchTelegram(search: String!): [TelegramUser!]!
  searchSticker(search: String!): Boolean!
}

input RoleFilter {
  id: Int
}

type Mutation {
  userLogin(LogingInput: LoginInput!): LoginResponse!
  createUser(CreateUserInput: CreateUserInput!): User!
  createProduct(product: createProductInput!): Product!
  updateProduct(product: updateProductInput!): Product!
  removeProduct(id: String!): Boolean!
  createCategory(input: CreateCategoryInput!): Category!
  updateCategory(input: updateCategoryInput!): Category!
  deleteCategory(id: Float!): Category!
  createChat(input: ChatInput!): Chat!
  createRole(Role: CreateRoleInput!): Role!
  updateRole(Role: UpdateRoleInput!): Role!
  sendNotification(input: NotificationInput!): Boolean!
  getBotDialog: Boolean!
  botSendMessage(input: BotMessageInput!): Boolean!
  botSendPollVote(poll: BotCreatePollVoteInput!): Boolean!
  checkUserTelegramAcc(phone: String!): ResultTelegram!
  telegramSendMessage(mess: SendMessageInput!): Boolean!
  addContact(input: AddContactInput!): Boolean!
  telegramSendVerifyCode: Boolean!
  startTelegramClient(input: SignInInput!): Boolean!
}

input LoginInput {
  """username of the user"""
  username: String!

  """password of the user"""
  password: String!
  deviceToken: String
}

input CreateUserInput {
  first_name: String!
  last_name: String!
  username: String!
  email: String!
  password: String!
  roleId: Int!
  status: EntityStatus! = ACTIVE
  userType: UserTypeEnum! = USER
}

enum UserTypeEnum {
  SUPER_ADMIN
  ADMIN
  USER
}

input createProductInput {
  name: String!
  description: String = ""
  createdBy: String
  updatedBy: String
  imageId: Int
  categoryId: Int!
}

input updateProductInput {
  name: String!
  description: String = ""
  createdBy: String
  updatedBy: String
  imageId: Int
  categoryId: Int!
  id: String!
}

input CreateCategoryInput {
  name: String!
}

input updateCategoryInput {
  name: String!
  id: Int!
}

input ChatInput {
  header: String!
  content: String
}

input CreateRoleInput {
  name: String!
  description: String
}

input UpdateRoleInput {
  name: String!
  description: String
  id: Int!
}

input NotificationInput {
  title: String!
  body: String! = ""
  to: String! = ""
}

input BotMessageInput {
  message: String!
}

input BotCreatePollVoteInput {
  question: String!
  options: [String!]!
}

input SendMessageInput {
  userName: String
  message: String
}

input AddContactInput {
  addPhonePrivacyException: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  phone: String = ""
}

input SignInInput {
  phone: String!
  verifyCode: String!
}